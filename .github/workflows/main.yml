name: Deploy to Amazon ECS

"on":
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
      is_application_deploy:
        description: "Whether to deploy the application"
        required: true
        default: "true"

env:
  # ECR repository.
  REPOSITORY_NAME: load-test-demo-tst
  # Name of the project (directory) in the repository to be operated on.
  PROJECT_NAME: backend
  # Assume role to be used for deploying to AWS.
  ROLE_TO_ASSUME: ${{ vars.TST_ROLE_TO_ASSUME }}
  # Relative path of dockerfile used for build.
  DOCKERFILE_PATH: docker/backend/Dockerfile.prod

jobs:
  push:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-1
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}

      - name: Docker image build and push to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE_PATH: docker/backend/Dockerfile.prod
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f $DOCKERFILE_PATH .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fetch TaskDefinition from ECS and generate task-def-api.json (api)
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.REPOSITORY_NAME }} | \
            jq '.taskDefinition | del (.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities)' > task-def-api.json

      - name: Render TaskDefinition
        id: render-container-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def-api.json
          container-name: app
          image:
            ${{ steps.login-ecr.outputs.registry }}/${{ env.REPOSITORY_NAME }}:${{
            github.sha }}

      - name: Deploy app with CodeDeploy Blue/Green deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-api.outputs.task-definition }}
          cluster: ${{ env.REPOSITORY_NAME }}
          service: ${{ env.REPOSITORY_NAME }}-service
          codedeploy-appspec: codedeploy/appspec.yml
          codedeploy-application: ${{ env.REPOSITORY_NAME }}
          codedeploy-deployment-group: ${{ env.REPOSITORY_NAME }}-group1
