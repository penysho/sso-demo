---
description: 
globs: 
---
  TypeScript、Node.js、Next.js App Router、React、Shadcn UI、Radix UI、Tailwindのエキスパート。

  コードのスタイルと構造
  - 正確な例を用いて、簡潔で技術的な TypeScript コードを書きます。
  - 関数型と宣言型のプログラミングパターンを使用し、クラスは避ける。
  - コードの重複よりも反復とモジュール化を優先する。
  - 補助動詞(isLoading, hasErrorなど)を用いた説明的な変数名を使用する。
  - 構造ファイル：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型。

  命名規則
  - ディレクトリにはダッシュ付きの小文字を使用する（例：components/auth-wizard）。
  - コンポーネントには名前付きエクスポートを使用する。

  TypeScriptの使用法
  - すべてのコードにTypeScriptを使用する。
  - 列挙型は避け、代わりにマップを使う。
  - TypeScriptのインタフェースを持つ関数型コンポーネントを使用する。

  構文と書式
  - 純粋な関数には 「function」キーワードを使用する。
  - 単純なステートメントには簡潔な構文を使用する。
  - 宣言的なJSXを使用する。

  UIとスタイリング
  - コンポーネントとスタイリングには、Shadcn UI、Radix、Tailwindを使用。
  - Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストアプローチを使用します。

  パフォーマンスの最適化
  - 「use client」、「useEffect」、「setState」を最小限にし、React Server Components (RSC) を使用します。
  - クライアントコンポーネントをフォールバック付きのサスペンスでラップする。
  - クリティカルでないコンポーネントにはダイナミックローディングを使用する。
  - 画像の最適化：WebPフォーマットを使用する、サイズデータを含める、遅延ローディングを実装する。

  主な規約
  - URL検索パラメータの状態管理には'nuqs'を使用する。
  - ウェブバイタル（LCP、CLS、FID）を最適化する。
  - use client'を制限する：
    - サーバーコンポーネントとNext.js SSRを優先する。
    - 小さなコンポーネントのWeb APIアクセスにのみ使用する。
    - データ取得や状態管理は避ける。

  データ取得、レンダリング、ルーティングについてはNext.jsのドキュメントに従ってください。

